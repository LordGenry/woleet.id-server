openapi: 3.0.0
info:
  description: This is Woleet.ID Server API documentation.
  version: 1.0.0
  title: Woleet.ID Server
  contact:
    email: contact@woleet.com
  license:
    name: MIT
tags:
  - name: Authentication
  - name: API Token
  - name: Key
  - name: User
  - name: Identity
  - name: Signature
security:
  - CookieAuth: []
paths:
  /login:
    get:
      tags:
        - Authentication
      summary: Log into the system. Both email or username can be used to authentify.
      operationId: login
      security:
        - BasicAuth: []
      responses:
        '200':
          description: User successfully logged in.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserInfo'
        '400':
          description: Missing email/username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Invalid email/username or password.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /logout:
    get:
      tags:
        - Authentication
      summary: Log out from the system.
      operationId: logout
      responses:
        '200':
          description: User successfully logged out.
  /info:
    get:
      tags:
        - Authentication
      summary: Return information about the current logged user.
      operationId: getUserInfo
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserInfo'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'

  /sign:
    get:
      operationId: getSignature
      summary: Sign some data using a user key.
      tags:
        - Signature
      description: >
        Use this endpoint to sign some data using one of the keys of a given user.
        <br>Compute the SHA256 hash of the data to sign (client side) and provide it in the `hashToSign` parameter.
        <br>Specify the user using either the `userId`, `customUserId` or the `pubKey` parameter.
        <br>The signature produced is the signature of the hash using the referred key or using the user's default key.
        <br>This endpoint is protected using an API token. It is recommended not to expose it publicly.
      parameters:
        - $ref: '#/components/parameters/HashToSignQueryParameter'
        - $ref: '#/components/parameters/UserIdQueryParameter'
        - $ref: '#/components/parameters/CustomUserIdQueryParameter'
        - $ref: '#/components/parameters/PubKeyToSignQueryParameter'
      security:
        - APITokenAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResult'
        '400':
          description: Missing or invalid query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad API token.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: The provided parameters did not match any key to sign with.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '409':
          description: The `pubKey` parameter was not provided and the user has no default key to fallback on.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'

  /identity:
    get:
      operationId: getIdentity
      summary: Prove and get the identity of a user.
      security: []
      tags:
        - Identity
      description: >
        Use this endpoint to prove that Woleet.ID Server manages a given key and to get the associated user's identity.
        <br>This endpoint signs some random data using the public key provided in the `pubKey` parameter and return the produced signature along with the associated user's identity.
        <br>The random data is built by concatenating the `leftData` parameter (provided by the client) and some random data (returned in the `rightData` field) generated by the server.
        <br>The caller must verify that the produced signature is valid for the public key (this validate the ownership of the private part of the key by Woleet.ID Server).
        <br>The caller can optionally read the TLS certificate securing this endpoint to get the certified identity of the hoster of Woleet.ID Server.
        <br>This endpoint is not protected. It is recommended to expose it publicly.
      parameters:
        - $ref: '#/components/parameters/PubKeyToVerifyQueryParameter'
        - $ref: '#/components/parameters/LeftDataQueryParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        '400':
          description: Missing or invalid query parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'

  /key/{keyId}:
    get:
      tags:
        - Key
      summary: Get a key by its identifier.
      description: Returns a key.
      operationId: getKeyById
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    put:
      tags:
        - Key
      summary: Update an existing key.
      operationId: updateKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/KeyPut'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    delete:
      tags:
        - Key
      summary: Deletes a key
      description: This can only be done by an admin.
      operationId: deleteKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /key/{keyId}/export:
    get:
      tags:
        - Key
      summary: Get the mnemonic words associated to a key.
      description: Returns a list of mnemonic words used to recover or import a key.
      operationId: exportKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mnemonics'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /user/{userId}/key:
    post:
      tags:
        - Key
      summary: Create a new key for a user.
      operationId: createKey
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        $ref: '#/components/requestBodies/KeyPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Key'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /user/{userId}/key/list:
    get:
      tags:
        - Key
      summary: List all keys of a user.
      description: Returns a key.
      operationId: getAllUserKeys
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/FullListQueryParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/KeyArray'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'

  /user:
    post:
      tags:
        - User
      summary: Create a new user.
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '400':
          description: Invalid object supplied / Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /user/{userId}:
    get:
      tags:
        - User
      summary: Get a user by his identifier.
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    put:
      tags:
        - User
      summary: Update a user.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
        description: Updated user object.
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          description: Invalid object supplied / Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    delete:
      tags:
        - User
      summary: Delete a user.
      description: This can only be done by an admin.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /user/list:
    get:
      tags:
        - User
      summary: List all users.
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/FullListQueryParameter'
      responses:
        '200':
          description: Arrau of users.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserArray'

  /APIToken:
    post:
      tags:
        - API Token
      summary: Create an API token suitable to call the /sign endpoint.
      description: This can only be done by an admin.
      operationId: createAPIToken
      requestBody:
        description: Created API token object.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APITokenPost'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIToken'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /APIToken/{APITokenId}:
    get:
      tags:
        - API Token
      summary: Get an API token by its identifier.
      operationId: getAPITokenById
      parameters:
        - $ref: '#/components/parameters/APITokenIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIToken'
        '400':
          description: Invalid API token identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    put:
      tags:
        - API Token
      summary: Update an API token.
      description: This can only be done by an admin.
      operationId: updateAPIToken
      parameters:
        - $ref: '#/components/parameters/APITokenIdParameter'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APITokenPut'
        description: Updated API token object.
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIToken'
        '400':
          description: Invalid object supplied / Invalid API token identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    delete:
      tags:
        - API Token
      summary: Delete an API token.
      description: This can only be done by an admin.
      operationId: deleteAPIToken
      parameters:
        - $ref: '#/components/parameters/APITokenIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIToken'
        '400':
          description: Invalid API token identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: API token not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /APIToken/list:
    get:
      tags:
        - API Token
      summary: List all API tokens.
      operationId: getAllAPITokens
      parameters:
        - $ref: '#/components/parameters/FullListQueryParameter'
      responses:
        '200':
          description: Succesful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APITokenArray'
        '401':
          description: Missing or bad session cookie.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'

components:
  schemas:
    Identity:
      type: object
      description: User identity provided as a set of X.500 attributes (see https://www.ietf.org/rfc/rfc4519.txt).
      properties:
        commonName:
          type: string
          description: commonName (CN) (2.5.4.3)
          example: "Jim Smith"
        organization:
          type: string
          description: organizationName (O) (2.5.4.10)
          example: "Woleet"
        organizationalUnit:
          type: string
          description: organizationalUnitName (OU) (2.5.4.11)
          example: "Sales"
        locality:
          type: string
          description: localityName (L) (2.5.4.7)
          example: "Rennes"
        country:
          type: string
          description: countryName (C) (2.5.4.6)
          example: "FR"
    FullIdentity:
      allOf:
        - $ref: '#/components/schemas/Identity'
        - type: object
          required:
            - commonName
          properties:
            userId:
              type: string
              description: >
                userId (UID) (0.9.2342.19200300.100.1.1)
                <br>The custom user identifier: it must be unique for each user.
              example: "wol.jim-smith.01"
    Password:
      type: string
      format: password
      description: User password.
      example: "nSBa+rV3%2/LpD"
    Mnemonics:
      type: object
      properties:
        phrase:
          type: string
          description: List of mnemonic words used to recover or import a key.
          example: "abandon ability able about above absent"
    PubKey:
      type: string
      description: Public key (bitcoin address when using BIP39 keys).
      example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    CreatedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of creation (Unix ms timestamp).
      example: 1529052551419
    UpdatedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of last modification (Unix ms timestamp).
      example: 1529052551419
    DeletedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of last modification (Unix ms timestamp) (`null` if not deleted).
      example: 1529052551419
    LastUsed:
      type: integer
      format: int64
      readOnly: true
      description: Date of last utilisation (Unix ms timestamp).
      example: 1529059167339
    LastLogin:
      type: integer
      format: int64
      readOnly: true
      description: Date of last login (Unix ms timestamp).
      example: 1529050155459
    UserRoleEnum:
      type: string
      enum:
       - user
       - admin
      default: "user"
      description: User role.
      example: "user"
    UserStatusEnum:
      type: string
      enum:
       - active
       - blocked
      default: "active"
      description: User status (a `blocked` user cannot sign).
      example: "active"
    UserBase:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email (can be used for login).
          example: "john.doe@acme.com"
        username:
          type: string
          description: User name (can be used for login).
          example: "johndoe"
        role:
          $ref: '#/components/schemas/UserRoleEnum'
        identity:
          $ref: '#/components/schemas/FullIdentity'
    User:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              description: User identifier (allocated by the server).
              example: "7c42e7e9-aec5-4d56-9a3b-bd55e129aae3"
            status:
              $ref: '#/components/schemas/UserStatusEnum'
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            deletedAt:
              $ref: '#/components/schemas/DeletedAt'
            lastLogin:
              $ref: '#/components/schemas/LastLogin'
            defaultKeyId:
              type: string
              format: uuid
              description: Identifier of the default key to use for this user.
              example: "c7c6e0de-2acb-4311-80b4-17dbf0b76806"
    UserPost:
      allOf:
        - $ref: '#/components/schemas/UserPut'
        - type: object
          required:
            - identity
    UserPut:
      allOf:
      - $ref: '#/components/schemas/UserBase'
      - type: object
        properties:
          status:
            $ref: '#/components/schemas/UserStatusEnum'
          password:
            $ref: '#/components/schemas/Password'
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/User'
    UserInfo:
      allOf:
        - $ref: '#/components/schemas/UserBase'
    KeyTypeEnum:
      type: string
      enum:
       - bip39
      description: Key type.
      example: "bip39"
    APITokenBase:
      type: object
      properties:
        name:
          type: string
          example: "My API token name"
          description: Key name.
        status:
          type: string
          enum:
          - active
          - blocked
          description: API token status.
          default: "active"
          example: "active"
    APIToken:
      allOf:
        - $ref: '#/components/schemas/APITokenBase'
        - type: object
          properties:
            id:
              readOnly: true
              type: string
              format: uuid
              description: API token identifier (allocated by the platform).
              example: "a35c9fee-3893-4eb7-adde-205e1be03209"
            value:
              readOnly: true
              type: string
              description: Token to use for the signature endpoint.
              example: "b9PXEeMpSCyeaPpQiZ3Bvw=="
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            deletedAt:
              $ref: '#/components/schemas/DeletedAt'
            lastUsed:
              $ref: '#/components/schemas/LastUsed'
    APITokenPost:
      allOf:
        - $ref: '#/components/schemas/APITokenBase'
        - type: object
          required:
            - name
    APITokenPut:
      allOf:
        - $ref: '#/components/schemas/APITokenBase'
    APITokenArray:
      type: array
      items:
        $ref: '#/components/schemas/APIToken'
    KeyBase:
      type: object
      properties:
        name:
          type: string
          example: "My key name"
          description: Key name.
        status:
          type: string
          enum:
          - active
          - blocked
          description: Key status.
          default: "active"
          example: "active"
    Key:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
        - type: object
          required:
            - name
          properties:
            id:
              readOnly: true
              type: string
              format: uuid
              description: Key identifier (allocated by the platform).
              example: "a35c9fee-3893-4eb7-adde-205e1be03209"
            pubKey:
              $ref: '#/components/schemas/PubKey'
            type:
              $ref: '#/components/schemas/KeyTypeEnum'
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            deletedAt:
              $ref: '#/components/schemas/DeletedAt'
            lastUsed:
              $ref: '#/components/schemas/LastUsed'
    KeyPost:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
        - type: object
          required:
          - name
    KeyPut:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
    KeyArray:
      type: array
      items:
        $ref: '#/components/schemas/Key'
    SignatureResult:
      type: object
      properties:
        pubKey:
          type: string
          format: base58
          example: "1KjQ8LgUgYVSqeK7JFhA9W8FVsHCzFrFi8"
          description: The public key used to sign (must be the same as the `pubKey` parameter, if provided).
        signedHash:
          type: string
          format: hex
          example: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
          description: The hash that is signed (same as the `hashToSign` parameter).
        signature:
          type: string
          format: base64
          example: "IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q="
          description: The signature of `hashToSign` using the public key `pubKey`.
        identityURL:
          type: string
          format: URL
          example: "https://woleetidserver.acme.com/v1/identity"
          description: The public URL of the `/identity` endpoint (ie. a URL that anyone can use to prove and verify the identity associated with the public key).
    IdentityResult:
      allOf:
        - type: object
          properties:
            rightData:
              type: string
              description: The right part of the signed data (generated ramdomly).
            signature:
              type: string
              format: base64
              example: "IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q="
              description: The signature of the concatenation of `leftData` and `rightData` using the public key `pubKey`.
            identity:
              $ref: '#/components/schemas/Identity'
    ApiError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              example: 418
            message:
              type: string
              example: "I'm a teapot"
          required:
            - code
            - message
  parameters:
    UserIdParameter:
      name: userId
      in: path
      description: Identifier of the user.
      required: true
      schema:
        type: string
        format: uuid
        example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
    KeyIdParameter:
      name: keyId
      in: path
      description: Identifier of the key.
      required: true
      schema:
        type: string
        format: uuid
        example: "552aa3fd-3b5e-434f-bdd3-9b6c58c269c1"
    APITokenIdParameter:
      name: APITokenId
      in: path
      description: Identifier of the API token.
      required: true
      schema:
        type: string
        format: uuid
        example: "f34d92e3-4f71-49ab-862f-69443bd48266"
    PubKeyToSignQueryParameter:
      name: pubKey
      in: query
      description: The public key to use to sign. When not provided, the default key of the user is used (if any).
      required: false
      schema:
        type: string
        example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    PubKeyToVerifyQueryParameter:
      name: pubKey
      in: query
      description: The public key to verify.
      required: true
      schema:
        type: string
        example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    FullListQueryParameter:
      name: full
      in: query
      description: Include deleted elements in the returned list.
      required: false
      schema:
        type: boolean
        example: true
    CustomUserIdQueryParameter:
      name: customUserId
      in: query
      description: The custom user identifier (ie. `userId` field of the user's identity).
      required: false
      schema:
        type: string
        example: "wol.jim-smith.01"
    UserIdQueryParameter:
      name: userId
      in: query
      description: The user identifier.
      required: false
      schema:
        type: string
        format: uuid
        example: "345a4513-0266-419a-8344-2daf645b78ed"
    LeftDataQueryParameter:
      name: leftData
      in: query
      description: Left part of the random data to sign (should be generated randomly).
      required: true
      schema:
        type: string
        example: '00c8a2b0c373050e7f2abbb2e4c631a42c10d402'
    HashToSignQueryParameter:
      name: hashToSign
      in: query
      description: The SHA256 hash that is to be signed (a string formatted like [a-f0-9]{64}).
      required: true
      schema:
        type: string
        example: 'd8e734d7c02e5b889e3e15acd5aaf231a67e1d9974f17b2c907148c4f4a7f975'
  requestBodies:
    KeyPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyPost'
      description: Key object to add.
      required: true
    KeyPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyPut'
      description: Replacement key object.
      required: true
    APITokenPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APITokenPost'
      description: API token object to add.
      required: true
    APITokenPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APITokenPut'
      description: Replacement API token object.
      required: true
  responses:
    User:
      $ref: '#/components/schemas/User'
    UserArray:
      $ref: '#/components/schemas/UserArray'
    UserInfo:
      $ref: '#/components/schemas/UserInfo'
    ApiError:
      $ref: '#/components/schemas/ApiError'
    Key:
      $ref: '#/components/schemas/Key'
    KeyArray:
      $ref: '#/components/schemas/KeyArray'
    APIToken:
      $ref: '#/components/schemas/APIToken'
    APITokenArray:
      $ref: '#/components/schemas/APITokenArray'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      description: Use email/username and password to authenticate.
    CookieAuth:
      type: apiKey
      in: cookie
      name: session
      description: Use a session cookie to authentify (see /login).
    APITokenAuth:
      type: http
      scheme: bearer
      description: Use an API token to authentify (see /APIToken).
