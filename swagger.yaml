openapi: 3.0.0
info:
  description: |
    This is Woleet.ID Server. You can find out more about woleet.io at [doc.woleet.io](https://doc.woleet.io).
  version: 1.0.0
  title: Woleet.ID Server
  contact:
    email: contact@woleet.com
  license:
    name: MIT
tags:
  - name: Authentication
  - name: APIKey
  - name: Key
  - name: User
  - name: Identity
  - name: Signature
security:
  - BasicAuth: []
  - BearerAuth: []
paths:
  /login:
    get:
      tags:
        - Authentication
      summary: Logs user into the system
      operationId: login
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successfully logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/SessionToken'
        '400':
          description: "Missing username or password"
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: "Invalid username or password"
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /info:
    get:
      tags:
        - Authentication
      summary: Return information about the current logged user.
      operationId: getUserInfo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  # Identity
  /sign:
    get:
      operationId: getSignature
      summary: Sign some data using the bitcoin identity of your backend.
      tags:
        - Signature
      description: >
        Use this endpoint to sign some data using the bitcoin identity of your backend.
          You first need to compute the SHA256 hash of your data (client side) and then provide it in the `hashToSign` parameter.
          <br>The signature produced is the signature of this hash using the key provided in the `pubKey` parameter (or by the default key of your user).
          <br>This endpoint is protected by an API key.
      parameters:
        - $ref: '#/components/parameters/HashToSignQueryParameter'
        - $ref: '#/components/parameters/PubKeyQueryParameter'
        - $ref: '#/components/parameters/CustomUserIdQueryParameter'
        - $ref: '#/components/parameters/UserIdQueryParameter'
      security:
        - AuthBearer: []
      responses:
        '200':
          description: The signature of `hashToSign` is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResult'
        '400':
          description: Missing or invalid query parameter
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: The provided parameters did not match any key to sign with.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '409':
          description: The `pubKey` parameter was not provided and the user has no default key to fallback on.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /identity:
    get:
      operationId: getIdentity
      summary: Prove the bitcoin identity of your backend.
      tags:
        - Identity
      description: >
        This endpoint can be used by anyone wanting to verify the bitcoin identity of your backend.
          Calling this endpoint (that should be accessible publicly) makes your backend sign some random data (built by concatenating the `leftData` parameter provided by the client and the `rightData` parameter provided by your backend) using the bitcoin address provided in the `pubKey` parameter.
          The caller can then verify that the produced signature is valid for the given bitcoin address (which validate the ownership of this address by your backend) and can optionally read the TLS certificate securing this endpoint to get the certified identity of your backend.
      parameters:
        - $ref: '#/components/parameters/PubKeyQueryParameter'
        - $ref: '#/components/parameters/LeftDataQueryParameter'
      responses:
        '200':
          description: The signature of the concatenation of `leftData` and `rightData` using the bitcoin address `pubKey` is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityResult'
        '400':
          description: Missing or invalid query parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: /identity endpoint is not reachable on this port.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  # End Identity
  /logout:
    get:
      tags:
        - Authentication
      summary: Logs out current logged in user
      operationId: logout
      responses:
        '200':
          description: Successfully logged out the user.
  # Admin
  # Key
  /user/{userId}/key:
    post:
      tags:
        - Key
      summary: Create a new key for a user.
      operationId: createKey
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
      requestBody:
        $ref: '#/components/requestBodies/KeyPost'
  /userd/{userId}/key/list:
    get:
      tags:
        - Key
      summary: List all keys of a user.
      description: Returns a key.
      operationId: getKeyById
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/FullListQueryParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Array of key.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/KeyArray'
        '400':
          description: Invalid ID supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'

  /key/{keyId}:
    get:
      tags:
        - Key
      summary: Get a key by its identifier.
      description: Returns a key.
      operationId: getKeyById
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid ID supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    put:
      tags:
        - Key
      summary: Update an existing key
      operationId: updateKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid ID or body supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
      security:
        - BearerAuth: []
      requestBody:
        $ref: '#/components/requestBodies/KeyPut'
    delete:
      tags:
        - Key
      summary: Deletes a key
      description: This can only be done by an admin.
      operationId: deleteKey
      parameters:
        - $ref: '#/components/parameters/KeyIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        '400':
          description: Invalid key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: Key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  # End Key
  # User
  /user:
    post:
      tags:
        - User
      summary: Create a new user.
      description: This can only be done by the logged in user.
      operationId: createUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '400':
          description: Invalid object supplied / Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
      requestBody:
        description: Created user object.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
  /user/{userId}:
    get:
      tags:
        - User
      summary: Get a user by his identifier.
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    put:
      tags:
        - User
      summary: Update a user.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPut'
        description: Updated user object.
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          description: Invalid object supplied / Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    delete:
      tags:
        - User
      summary: Delete a user.
      description: This can only be done by an admin.
      operationId: deleteUser
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/User'
        '400':
          description: Invalid user identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /user/list:
    get:
      tags:
        - User
      summary: List all users.
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/UserIdParameter'
        - $ref: '#/components/parameters/FullListQueryParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User list.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/UserArray'
  # End User
  # APIKey
  /APIKey:
    post:
      tags:
        - APIKey
      summary: Create an API key suitable to call the /sign endpoint.
      description: This can only be done by an admin.
      operationId: createAPIKey
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIKey'
        '400':
          description: Invalid object supplied.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
      requestBody:
        description: Created APIKey object.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKeyPost'
  /APIKey/{APIKeyId}:
    get:
      tags:
        - APIKey
      summary: Get an API key by its identifier.
      operationId: getAPIKeyById
      parameters:
        - $ref: '#/components/parameters/APIKeyIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIKey'
        '400':
          description: Invalid API key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: API key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    put:
      tags:
        - APIKey
      summary: Update an API key.
      description: This can only be done by the logged in API key.
      operationId: updateAPIKey
      parameters:
        - $ref: '#/components/parameters/APIKeyIdParameter'
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKeyPut'
        description: Updated API key object.
        required: true
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIKey'
        '400':
          description: Invalid object supplied / Invalid API key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: API key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
    delete:
      tags:
        - APIKey
      summary: Delete an API key.
      description: This can only be done by an admin.
      operationId: deleteAPIKey
      parameters:
        - $ref: '#/components/parameters/APIKeyIdParameter'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIKey'
        '400':
          description: Invalid API key identifier.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
        '404':
          description: API key not found.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  /APIKey/list:
    get:
      tags:
        - APIKey
      summary: List all API keys.
      operationId: getAllAPIKeys
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/FullListQueryParameter'
      responses:
        '200':
          description: API key list.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/APIKeyArray'
        '401':
          description: Missing or bad token
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ApiError'
  # End APIKey
  # End Admin
components:
  schemas:
    Identity:
      type: object
      description: X.500 attributes as defined in https://www.ietf.org/rfc/rfc4519.txt.
      properties:
        commonName:
          type: string
          description: commonName (CN) (2.5.4.3)
          example: "Jim Smith"
        organization:
          type: string
          description: organizationName (O) (2.5.4.10)
          example: "Woleet"
        organizationalUnit:
          type: string
          description: organizationalUnitName (OU) (2.5.4.11)
          example: "Sales"
        locality:
          type: string
          description: localityName (L) (2.5.4.7)
          example: "Rennes"
        country:
          type: string
          description: countryName (C) (2.5.4.6)
          example: "France"
        userId:
          type: string
          description: |
            userId (UID) (0.9.2342.19200300.100.1.1)
            This identifier must be unique and can be used to identify a user.
          example: "wol.jim-smith.01"
    UserBase:
      type: object
      properties:
        email:
          type: string
          format: email
          default: null # step 1
          description: User's email.
          example: "user.foo@example.com"
        username:
          type: string
          default: null # step 1
          description: User's alias.
          example: "user-alias"
        role:
          $ref: '#/components/schemas/UserRoleEnum'
        identity:
          $ref: '#/components/schemas/Identity'
    UserDetail:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: uuid
              readOnly: true
              example: "7c42e7e9-aec5-4d56-9a3b-bd55e129aae3"
            type:
              $ref: '#/components/schemas/UserRoleEnum'
            status:
              $ref: '#/components/schemas/UserStatusEnum'
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            deletedAt:
              $ref: '#/components/schemas/DeletedAt'
            lastLogin:
              $ref: '#/components/schemas/LastLogin'
            defaultKeyId:
              type: string
              format: uuid
              readOnly: true
              example: "c7c6e0de-2acb-4311-80b4-17dbf0b76806"
        - $ref: '#/components/schemas/UserBase'
    Password:
      type: string
      format: password
      # description: Password of the user (it must be provided at creation time).
      default: null # step 1
      description: Password of the user (optional for now).
      example: "nSBa+rV3%2/LpD"
    PublicKey:
      type: string
      description: Public key.
      example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    CreatedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of creation (Unix ms timestamp).
      example: 1529052551419
    UpdatedAt:
      type: integer
      format: int64
      readOnly: true
      description: Date of last modification (Unix ms timestamp).
      example: 1529052551419
    DeletedAt:
      type: integer
      format: int64
      readOnly: true
      description: |
        Date of last modification (Unix ms timestamp).
        Set to "null" if not deleted.
      example: 1529052551419
    LastUsed:
      type: integer
      format: int64
      readOnly: true
      description: Date of last utilisation (Unix ms timestamp).
      example: 1529059167339
    LastLogin:
      type: integer
      format: int64
      readOnly: true
      description: Date of last login (Unix ms timestamp).
      example: 1529050155459
    UserRoleEnum:
      type: string
      enum:
       - user
       - admin
      default: "user"
      description: User type.
      example: "user"
    UserStatusEnum:
      type: string
      enum:
       - active
       - blocked
      default: "active"
      description: |
        User Status:
         - A blocked user cannot sign.
      example: "active"
    UserPut:
      allOf:
        - type: object
          properties:
            type:
              $ref: '#/components/schemas/UserRoleEnum'
            status:
              $ref: '#/components/schemas/UserStatusEnum'
            password:
              $ref: '#/components/schemas/Password'
        - $ref: '#/components/schemas/UserBase'
    UserPost:
      allOf:
        - $ref: '#/components/schemas/UserPut'
        - type: object
          required:
            # - username # step2
            # - password # step2
            - identity
    User:
      description: A user DTO accessible from regular user.
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
    KeyTypeEnum:
      type: string
      enum:
       - bip39
      description: Key type.
      example: "bip39"
    # APIKey
    APIKeyBase:
      type: object
      properties:
        name:
          type: string
          example: "API key name"
          description: Key name.
        status:
          type: string
          enum:
          - active
          - blocked
          description: Key status.
          default: "active"
          example: "active"
    APIKey:
      allOf:
        - type: object
          required:
          - name
          properties:
            id:
              readOnly: true
              type: string
              format: uuid
              description: API Key id.
              example: "a35c9fee-3893-4eb7-adde-205e1be03209"
            value:
              readOnly: true
              type: string
              description: Token to use for the signature endpoint.
              example: "b9PXEeMpSCyeaPpQiZ3Bvw=="
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            deletedAt:
              $ref: '#/components/schemas/DeletedAt'
            lastUsed:
              $ref: '#/components/schemas/LastUsed'
        - $ref: '#/components/schemas/APIKeyBase'
    APIKeyPost:
      allOf:
        - $ref: '#/components/schemas/APIKeyBase'
        - type: object
          required:
          - name
    APIKeyPut:
      allOf:
        - $ref: '#/components/schemas/APIKeyBase'
    # Key
    KeyBase:
      type: object
      properties:
        name:
          type: string
          example: "Key name"
          description: Key name.
        status:
          type: string
          enum:
          - active
          - blocked
          description: Key status.
          default: "active"
          example: "active"
    Key:
      allOf:
        - type: object
          required:
          - name
          properties:
            id:
              readOnly: true
              type: string
              format: uuid
              description: Key id.
              example: "a35c9fee-3893-4eb7-adde-205e1be03209"
            publicKey:
              $ref: '#/components/schemas/PublicKey'
            type:
              $ref: '#/components/schemas/KeyTypeEnum'
            createdAt:
              $ref: '#/components/schemas/CreatedAt'
            updatedAt:
              $ref: '#/components/schemas/UpdatedAt'
            deletedAt:
              $ref: '#/components/schemas/DeletedAt'
            lastUsed:
              $ref: '#/components/schemas/LastUsed'
        - $ref: '#/components/schemas/KeyBase'
    # KeyExpiration:
    #   type: integer
    #   format: int64
    #   readOnly: true
    #   description: Date to disable the key.
    #   example: 1531651039296
    KeyPost:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
        - type: object
          required:
          - name
    KeyPut:
      allOf:
        - $ref: '#/components/schemas/KeyBase'
    # JSONWebToken:
    #   type: string
    #   example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJNYlRqbmVSM1NtdWxScTg5djB5cTBnPT0ifQ.ggNDtcSoMQJ7J1l31yeKRZtT2b3UBUmh4EHusUrM5mA"
    SessionToken:
      type: string
      example: "doy7GCOUR0uGz6ssPvF6wQ=="
    SignatureResult:
      type: object
      properties:
        pubKey:
          type: string
          format: base58
          example: "1KjQ8LgUgYVSqeK7JFhA9W8FVsHCzFrFi8"
          description: The bitcoin address used to sign (same as the `pubKey` parameter, if provided).
        signedHash:
          type: string
          format: hex
          example: "01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"
          description: The hash that is signed (same as the `hashToSign` parameter).
        signature:
          type: string
          format: base64
          example: "IKnOvW2/BQqahssC2l9Icz7qiJQqesgu0HCKvW/L5xZLaMCLyg19ATDNJojMILdUijFOqiRzgk6ieDXi89DeB0Q="
          description: The signature of `hashToSign` using the bitcoin address `pubKey`.
        identityURL:
          type: string
          format: URL
          example: "https://api.woleet.io/v1/identity"
          description: The public URL of the `/identity` endpoint (ie. the URL that anyone can use to verify the bitcoin identity of your backend).
    IdentityResult:
      type: object
      properties:
        rightData:
          type: string
          description: The right part of the signed data (generated ramdomly).
        signature:
          type: string
          description: The signature of the concatenation of `leftData` and `rightData` using the bitcoin address `pubKey`.
    ApiError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
              format: int32
              example: 418
            message:
              type: string
              example: "I'm a teapot"
          required:
            - code
            - message
    UserArray:
      type: array
      items:
        $ref: '#/components/schemas/UserDetail'
    KeyArray:
      type: array
      items:
        $ref: '#/components/schemas/Key'
    APIKeyArray:
      type: array
      items:
        $ref: '#/components/schemas/APIKey'
  parameters:
    UserIdParameter:
      name: userId
      in: path
      description: Identifier of the user.
      required: true
      schema:
        type: string
        format: uuid
        example: 'feb37e23-d04e-4e71-bf53-1f1a75ba3a68'
    KeyIdParameter:
      name: keyId
      in: path
      description: Identifier of the key.
      required: true
      schema:
        type: string
        format: uuid
        example: "552aa3fd-3b5e-434f-bdd3-9b6c58c269c1"
    APIKeyIdParameter:
      name: APIKeyId
      in: path
      description: Identifier of the API key.
      required: true
      schema:
        type: string
        format: uuid
        example: "f34d92e3-4f71-49ab-862f-69443bd48266"
    PubKeyQueryParameter:
      name: pubKey
      in: query
      description: The bitcoin address to use to sign.
      required: false
      schema:
        type: string
        example: "1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh"
    FullListQueryParameter:
      name: full
      in: query
      description: Include deleted elements in the returned list.
      required: false
      schema:
        type: boolean
        example: true
    CustomUserIdQueryParameter:
      name: customUserId
      in: query
      description: |
        The custom user id set in the user's identity.
        <br>If the "pubKey" query parameter is not set, the default pubKey will be used to sign.
      required: false
      schema:
        type: string
        example: "wol.jim-smith.01"
    UserIdQueryParameter:
      name: userId
      in: query
      description: |
        The user identifier.
        <br>If the "pubKey" query parameter is not set, the default pubKey will be used to sign.
      required: false
      schema:
        type: string
        format: uuid
        example: "345a4513-0266-419a-8344-2daf645b78ed"
    LeftDataQueryParameter:
      name: leftData
      in: query
      description: Left part of the random data to sign (should be generated randomly).
      required: true
      schema:
        type: string
        example: '00c8a2b0c373050e7f2abbb2e4c631a42c10d402'
    HashToSignQueryParameter:
      name: hashToSign
      in: query
      description: The SHA256 hash that is to be signed (a string formatted like [a-f0-9]{64}).
      required: true
      schema:
        type: string
        example: 'd8e734d7c02e5b889e3e15acd5aaf231a67e1d9974f17b2c907148c4f4a7f975'
  requestBodies:
    Key:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Key'
      required: true
    KeyPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyPost'
      description: Key object to add.
      required: true
    KeyPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyPut'
      description: Replacement key object.
      required: true
    APIKeyPost:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIKeyPost'
      description: APIKey object to add.
      required: true
    APIKeyPut:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/APIKeyPut'
      description: Attributes of the API key to replace.
      required: true
  responses:
    User:
      $ref: '#/components/schemas/UserDetail'
    Identity:
      $ref: '#/components/schemas/Identity'
    ApiError:
      $ref: '#/components/schemas/ApiError'
    UserArray:
      $ref: '#/components/schemas/UserArray'
    KeyArray:
      $ref: '#/components/schemas/KeyArray'
    APIKey:
      $ref: '#/components/schemas/APIKey'
    APIKeyArray:
      $ref: '#/components/schemas/APIKeyArray'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
