/*
 * Woleet.ID Server
 * This is Woleet.ID Server API documentation.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.idserver.api;

import io.woleet.idserver.ApiException;
import io.woleet.idsever.api.model.ApiError;
import io.woleet.idsever.api.model.Key;
import io.woleet.idsever.api.model.KeyArray;
import io.woleet.idsever.api.model.KeyBase;
import io.woleet.idsever.api.model.KeyPost;
import io.woleet.idsever.api.model.KeyPut;
import io.woleet.idsever.api.model.Passphrase;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KeyApi
 */
@Ignore
public class KeyApiTest {

    private final KeyApi api = new KeyApi();

    
    /**
     * Create a new key for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKeyTest() throws ApiException {
        UUID userId = null;
        KeyPost keyPost = null;
        Key response = api.createKey(userId, keyPost);

        // TODO: test validations
    }
    
    /**
     * Deletes a key
     *
     * This can only be done by an admin.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteKeyTest() throws ApiException {
        UUID keyId = null;
        Key response = api.deleteKey(keyId);

        // TODO: test validations
    }
    
    /**
     * Get the secret recoveryphrase associated to a key.
     *
     * Returns a passprase.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportKeyTest() throws ApiException {
        UUID keyId = null;
        Passphrase response = api.exportKey(keyId);

        // TODO: test validations
    }
    
    /**
     * Get a key by its identifier.
     *
     * Returns a key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKeyByIdTest() throws ApiException {
        UUID keyId = null;
        Key response = api.getKeyById(keyId);

        // TODO: test validations
    }
    
    /**
     * List all keys of a user.
     *
     * Returns a key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getKeyById_0Test() throws ApiException {
        UUID userId = null;
        Boolean full = null;
        KeyArray response = api.getKeyById_0(userId, full);

        // TODO: test validations
    }
    
    /**
     * Update an existing key.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateKeyTest() throws ApiException {
        UUID keyId = null;
        KeyPut keyPut = null;
        Key response = api.updateKey(keyId, keyPut);

        // TODO: test validations
    }
    
}
